import { SceneLogic } from '../scene/scene-logic';
import { TCameraProps } from '../../shared/camera.types';
import { TSceneObject } from '../scene/scene.types';
import { DynamicsLogic } from '../scene/dynamics-logic';
import { MAP_CONFIG } from './map-config';
import { ResourceManager } from '../resources';

export class MapLogic {

    constructor(
        public scene: SceneLogic, 
        public dynamics: DynamicsLogic,
        public resources: ResourceManager
    ) {
        // Constructor implementation
    }

    initMap(cameraProps: TCameraProps) {
        this.scene.initializeViewport(cameraProps, { 
            x: MAP_CONFIG.width, 
            y: MAP_CONFIG.height, 
            z: MAP_CONFIG.depth 
        });

        let addedObjects = 0;
        let skippedObjects = 0;

        // –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–∞–º–µ–Ω—é–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ
        this.generateBoulders();
        
                // –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–∞–º–µ–Ω—é–∫–∏ —Ç–∏–ø—É rock
        this.generateRocks();
        
        // –õ–æ–≥—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±'—î–∫—Ç—ñ–≤
        const totalObjects = Object.keys(this.scene.getObjects()).length;
        
        // –ì–µ–Ω–µ—Ä—É—î–º–æ rover –æ–±'—î–∫—Ç–∏
        this.generateRovers();
        
        // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ö–º–∞—Ä–∏
        console.log('üó∫Ô∏è MapLogic: –ø–æ—á–∏–Ω–∞—î–º–æ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ö–º–∞—Ä–∏...');
        //this.generateClouds();
        console.log('üó∫Ô∏è MapLogic: —Ö–º–∞—Ä–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ');
        
        // –ì–µ–Ω–µ—Ä—É—î–º–æ –¥–∂–µ—Ä–µ–ª–∞ –¥–∏–º—É
        console.log('üí® MapLogic: –ø–æ—á–∏–Ω–∞—î–º–æ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥–∏–º...');
        this.generateSmoke();
        console.log('üí® MapLogic: –¥–∏–º –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ');

        this.generateArcs();
        
        // –ì–µ–Ω–µ—Ä—É—î–º–æ –¥–∂–µ—Ä–µ–ª–∞ –≤–æ–≥–Ω—é
        console.log('üî• MapLogic: –ø–æ—á–∏–Ω–∞—î–º–æ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤–æ–≥–æ–Ω—å...');
        this.generateFire();
        console.log('üî• MapLogic: –≤–æ–≥–æ–Ω—å –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ');
        
        // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–±—É—Ö–∏
        console.log('üí• MapLogic: –ø–æ—á–∏–Ω–∞—î–º–æ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤–∏–±—É—Ö–∏...');
        this.generateExplosions();
        console.log('üí• MapLogic: –≤–∏–±—É—Ö–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ');
        
        // –õ–æ–≥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç

        // –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –æ–±'—î–∫—Ç (–±–µ–∑ terrain constraint)
        const dynamicCube: TSceneObject = {
            id: 'dynamic_test_cube',
            type: 'cube',
            coordinates: { x: 0, y: 2, z: 0 },
            scale: { x: 1, y: 1, z: 1 },
            rotation: { x: 0, y: 0, z: 0 },
            data: { 
                color: 0xff0000,
                maxSpeed: 1.5, // –¢–µ—Å—Ç–æ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å
                rotatable: false, // –ö—É–± –Ω–µ –æ–±–µ—Ä—Ç–∞—î—Ç—å—Å—è
                rotationOffset: 0 // –ë–µ–∑ –∑–º—ñ—â–µ–Ω–Ω—è –∫—É—Ç–∞
            },
            tags: ['dynamic', 'test', 'floating'], // –ë–µ–∑ —Ç–µ–≥—É on-ground
            bottomAnchor: -0.5 // –ö—É–± —Å—Ç–æ—ó—Ç—å –Ω–∞ —Å–≤–æ—î–º—É –Ω–∏–∑—É
        };
        
        this.scene.pushObject(dynamicCube);

        setInterval(
            this.tick.bind(this),
            100 // This will be increased for sure
        )
    }



    /**
     * –ì–µ–Ω–µ—Ä—É—î –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ñ –∫–∞–º–µ–Ω—é–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ
     */
    private generateBoulders() {
        const boulderCount = 100; // –ó–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–º–µ–Ω—é–∫—ñ–≤
        const mapBounds = {
            minX: -MAP_CONFIG.width / 2,
            maxX: MAP_CONFIG.width / 2,
            minZ: -MAP_CONFIG.depth / 2,
            maxZ: MAP_CONFIG.depth / 2
        };

        for (let i = 0; i < boulderCount; i++) {
            // –í–∏–ø–∞–¥–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –Ω–∞ –∫–∞—Ä—Ç—ñ
            const x = mapBounds.minX + Math.random() * (mapBounds.maxX - mapBounds.minX);
            const z = mapBounds.minZ + Math.random() * (mapBounds.maxZ - mapBounds.minZ);
            
            // –í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä –∫–∞–º–µ–Ω—é–∫–∞
            const size = 0.3 + Math.random() * 1.2; // –í—ñ–¥ 0.3 –¥–æ 1.5 (–º–µ–Ω—à—ñ –∫–∞–º–µ–Ω—é–∫–∏)
            
            // –í–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–æ–ª—ñ—Ä (–≤—ñ–¥—Ç—ñ–Ω–∫–∏ —Å—ñ—Ä–æ–≥–æ —Ç–∞ –∫–æ—Ä–∏—á–Ω–µ–≤–æ–≥–æ)
            const colors = [0x8B7355, 0x696969, 0x808080, 0xA0522D, 0x8B4513];
            const color = colors[Math.floor(Math.random() * colors.length)];
            
            // –í–∏–ø–∞–¥–∫–æ–≤–∞ —à–æ—Ä—Å—Ç–∫—ñ—Å—Ç—å –¥–ª—è —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ
            const roughness = 0.2 + Math.random() * 0.4; // –í—ñ–¥ 0.2 –¥–æ 0.6
            
            const boulder: TSceneObject = {
                id: `boulder_${i}`,
                type: 'boulder',
                coordinates: { x, y: 0, z }, // Y –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ terrain —Å–∏—Å—Ç–µ–º–æ—é
                scale: { x: size, y: size, z: size },
                rotation: { 
                    x: Math.random() * Math.PI, 
                    y: Math.random() * Math.PI, 
                    z: Math.random() * Math.PI 
                },
                data: { 
                    color,
                    size,
                    roughness,
                    modelPath: (() => {
                        const rand = Math.random();
                        if (rand < 0.33) return '/models/stone2.glb';
                        if (rand < 0.66) return '/models/stone3.glb';
                        return '/models/stone4.glb';
                    })() // –í–∏–ø–∞–¥–∫–æ–≤–æ –≤–∏–±–∏—Ä–∞—î–º–æ –º—ñ–∂ —Ç—Ä—å–æ–º–∞ –º–æ–¥–µ–ª—è–º–∏
                },
                tags: ['on-ground', 'static', 'boulder'], // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç—å—Å—è –Ω–∞ terrain
                bottomAnchor: -0.2, // –ö–∞–º–µ–Ω—é–∫ —Å—Ç–æ—ó—Ç—å –Ω–∞ —Å–≤–æ—î–º—É –Ω–∏–∑—É
                terrainAlign: true // –ù–∞—Ö–∏–ª—è—î—Ç—å—Å—è –ø–æ –Ω–æ—Ä–º–∞–ª—ñ terrain
            };
            
            // –î–æ–¥–∞—î–º–æ –∑ terrain constraint
            const success = this.scene.pushObjectWithTerrainConstraint(boulder);
            if (success) {
                const modelUsed = (() => {
                    const rand = Math.random();
                    if (rand < 0.33) return 'stone2.glb';
                    if (rand < 0.66) return 'stone3.glb';
                    return 'stone4.glb';
                })();
                // console.log(`–î–æ–¥–∞–Ω–æ –∫–∞–º–µ–Ω—é–∫ boulder ${i} –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó (${x.toFixed(1)}, ${z.toFixed(1)}) –∑ –º–æ–¥–µ–ª–ª—é ${modelUsed}`);
            }
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä—É—î –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ñ –∫–∞–º–µ–Ω—é–∫–∏ —Ç–∏–ø—É rock –Ω–∞ –∫–∞—Ä—Ç—ñ
     */
    private generateRocks() {
        const rockCount = 2000; // –ó–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–º–µ–Ω—é–∫—ñ–≤
        const mapBounds = {
            minX: -MAP_CONFIG.width / 2,
            maxX: MAP_CONFIG.width / 2,
            minZ: -MAP_CONFIG.depth / 2,
            maxZ: MAP_CONFIG.depth / 2
        };

        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞—Å—Ç–µ—Ä–∏ –∫–∞–º–µ–Ω—é–∫—ñ–≤ –¥–ª—è –±—ñ–ª—å—à —â—ñ–ª—å–Ω–æ–≥–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—É
        const clusterCount = 100; // –ó–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤
        const rocksPerCluster = Math.floor(rockCount / clusterCount); // –ö–∞–º–µ–Ω—é–∫–∏ –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä

        for (let cluster = 0; cluster < clusterCount; cluster++) {
            // –¶–µ–Ω—Ç—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞
            const clusterCenterX = mapBounds.minX + Math.random() * (mapBounds.maxX - mapBounds.minX);
            const clusterCenterZ = mapBounds.minZ + Math.random() * (mapBounds.maxZ - mapBounds.minZ);
            const clusterRadius = 5 + Math.random() * 5; // –ó–±—ñ–ª—å—à—É—î–º–æ —Ä–∞–¥—ñ—É—Å –∫–ª–∞—Å—Ç–µ—Ä–∞

            // –ö–æ–∂–µ–Ω –∫–ª–∞—Å—Ç–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –ø–µ–≤–Ω–∏–π —Ç–∏–ø —Ä–µ—Å—É—Ä—Å—É
            const resourceType: 'stone' | 'ore' = cluster % 2 === 0 ? 'stone' : 'ore';
            
            // –ö–æ–ª—ñ—Ä –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Ç–∏–ø—É —Ä–µ—Å—É—Ä—Å—É
            const resourceColors = resourceType === 'stone' 
                ? [0x8B7355, 0x696969, 0x808080, 0xA0522D, 0x8B4513] // –°—ñ—Ä—ñ/–∫–æ—Ä–∏—á–Ω–µ–≤—ñ –≤—ñ–¥—Ç—ñ–Ω–∫–∏ –¥–ª—è –∫–∞–º–µ–Ω—é
                : [0x8B4513, 0x654321, 0x8B6914, 0x6B4423, 0x654321]; // –¢–µ–º–Ω–æ-—Ä–∂–∞–≤—ñ –≤—ñ–¥—Ç—ñ–Ω–∫–∏ –¥–ª—è —Ä—É–¥–∏

            for (let j = 0; j < rocksPerCluster; j++) {
                // –ü–æ–∑–∏—Ü—ñ—è –≤ –º–µ–∂–∞—Ö –∫–ª–∞—Å—Ç–µ—Ä–∞
                const angle = Math.random() * Math.PI * 2;
                const distance = Math.random() * clusterRadius;
                const x = clusterCenterX + Math.cos(angle) * distance;
                const z = clusterCenterZ + Math.sin(angle) * distance;
            
                // –í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä –∫–∞–º–µ–Ω—é–∫–∞ –∑ –±—ñ–ª—å—à–æ—é –≤–∞—Ä—ñ–∞—Ü—ñ—î—é
                const baseSize = 0.45 + Math.random() * 0.25; // –í—ñ–¥ 0.45 –¥–æ 0.7
                
                // –í–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–æ–ª—ñ—Ä –∑ –ø–∞–ª—ñ—Ç—Ä–∏ –¥–ª—è –¥–∞–Ω–æ–≥–æ —Ç–∏–ø—É —Ä–µ—Å—É—Ä—Å—É
                const color = resourceColors[Math.floor(Math.random() * resourceColors.length)];
                
                // –í–∏–ø–∞–¥–∫–æ–≤–∞ –≥–ª–∞–¥–∫—ñ—Å—Ç—å –¥–ª—è —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ
                const smoothness = 0.6 + Math.random() * 0.3; // –í—ñ–¥ 0.6 –¥–æ 0.9 (–±—ñ–ª—å—à –≥–ª–∞–¥–∫—ñ)
                
                const rock: TSceneObject = {
                    id: `rock_${cluster}_${j}`,
                    type: 'rock',
                    coordinates: { x, y: 0, z }, // Y –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ terrain —Å–∏—Å—Ç–µ–º–æ—é
                    scale: { x: baseSize, y: baseSize, z: baseSize }, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–¥–Ω–∞–∫–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä –¥–ª—è GLB –º–æ–¥–µ–ª—ñ
                    rotation: { 
                        x: Math.random() * Math.PI, 
                        y: Math.random() * Math.PI, 
                        z: Math.random() * Math.PI 
                    },
                    data: { 
                        color,
                        size: baseSize, // –ë–∞–∑–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
                        smoothness, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ smoothness –∑–∞–º—ñ—Å—Ç—å roughness
                        resourceId: resourceType, // –î–æ–¥–∞—î–º–æ —Ç–∏–ø —Ä–µ—Å—É—Ä—Å—É
                        resourceAmount: 1 + Math.floor(Math.random() * 3), // 1-3 –æ–¥–∏–Ω–∏—Ü—ñ —Ä–µ—Å—É—Ä—Å—É
                        modelPath: (() => {
                            const rand = Math.random();
                            if (rand < 0.33) return '/models/stone4.glb';
                            if (rand < 0.66) return '/models/stone2.glb';
                            return '/models/stone3.glb';
                        })() // –í–∏–ø–∞–¥–∫–æ–≤–æ –≤–∏–±–∏—Ä–∞—î–º–æ –º—ñ–∂ —Ç—Ä—å–æ–º–∞ –º–æ–¥–µ–ª—è–º–∏
                    },
                    tags: ['on-ground', 'static', 'rock', 'resource'], // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç—å—Å—è –Ω–∞ terrain
                    bottomAnchor: -baseSize * 0.3, // –ö–∞–º–µ–Ω—é–∫ —Å—Ç–æ—ó—Ç—å –Ω–∞ —Å–≤–æ—î–º—É –Ω–∏–∑—É
                    terrainAlign: true // –ù–∞—Ö–∏–ª—è—î—Ç—å—Å—è –ø–æ –Ω–æ—Ä–º–∞–ª—ñ terrain
                };
                
                // –î–æ–¥–∞—î–º–æ –∑ terrain constraint
                const success = this.scene.pushObjectWithTerrainConstraint(rock);
                if (success) {
                    const modelUsed = (() => {
                        const rand = Math.random();
                        if (rand < 0.33) return 'stone2.glb';
                        if (rand < 0.66) return 'stone3.glb';
                        return 'stone4.glb';
                    })();
                    // –î–æ–¥–∞–Ω–æ –∫–∞–º–µ–Ω—é–∫ rock
                }
            }
        }
        
        console.log(`üó∫Ô∏è MapLogic: –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ ${clusterCount} –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ —Ä–µ—Å—É—Ä—Å—ñ–≤ (${Math.floor(clusterCount/2)} –∫–∞–º–µ–Ω—é, ${Math.ceil(clusterCount/2)} —Ä—É–¥–∏)`);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–∞–π–Ω—è—Ç–∞ –ø–æ–∑–∏—Ü—ñ—è –∫–∞–º–µ–Ω—é–∫–æ–º (rock –∞–±–æ boulder)
     */
    private isPositionOccupiedByRock(x: number, z: number): boolean {
        // –†–∞–¥—ñ—É—Å –±–µ–∑–ø–µ–∫–∏ –Ω–∞–≤–∫–æ–ª–æ –ø–æ–∑–∏—Ü—ñ—ó (—Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–∏–π –∑–∞ —Ä–æ–∑–º—ñ—Ä –∫–∞–º–µ–Ω—é–∫–∞)
        const safetyRadius = 1.0;
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –æ–±'—î–∫—Ç–∏ —Ç–∏–ø—É rock —Ç–∞ boulder –∑—ñ —Å—Ü–µ–Ω–∏
        const allObjects = Object.values(this.scene.getObjects());
        const rockObjects = allObjects.filter((obj: TSceneObject) => 
            obj.type === 'rock' || obj.type === 'boulder'
        );
        
        for (const rock of rockObjects) {
            const rockX = rock.coordinates.x;
            const rockZ = rock.coordinates.z;
            
            // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –ø–æ–∑–∏—Ü—ñ—î—é —Ç–∞ –∫–∞–º–µ–Ω—é–∫–æ–º
            const distance = Math.sqrt(
                Math.pow(x - rockX, 2) + Math.pow(z - rockZ, 2)
            );
            
            // –Ø–∫—â–æ –≤—ñ–¥—Å—Ç–∞–Ω—å –º–µ–Ω—à–∞ –∑–∞ —Ä–∞–¥—ñ—É—Å –±–µ–∑–ø–µ–∫–∏, –ø–æ–∑–∏—Ü—ñ—è –∑–∞–π–Ω—è—Ç–∞
            if (distance < safetyRadius) {
                return true;
            }
        }
        
        return false;
    }

    private generateArcs() {
        const arcCount = 5;

        for(let i = 0; i < arcCount; i++) {

            const x = (Math.random() - 0.5) * 200; // X: -200 –¥–æ 200
            const z = (Math.random() - 0.5) * 200; // Z: -200 –¥–æ 200

            const arc: TSceneObject = {
                id: `bolt-${i}`,
                type: 'electric-arc',
                coordinates: { x, y: 50, z },     // A
                scale: { x: 1, y: 1, z: 1},
                rotation: {x: 0, y: 0, z: 0},
                tags: ['effect', 'dynamic'],
                data: {
                  target: { x: x + Math.random()*150, y: 0, z: z + Math.random()*150 },       // B
                  kinks: 14,           // –±—ñ–ª—å—à–µ –∑–ª–∞–º—ñ–≤ = ¬´–¥—Ä—ñ–±–Ω—ñ—à–∞¬ª –±–ª–∏—Å–∫–∞–≤–∫–∞
                  amplitude: 5,     // —à–∏—Ä–∏–Ω–∞ –∫—Ä–∏–≤—É–ª—ñ —É world units
                  thicknessPx: 0.03,    // —è–¥—Ä–æ
                  glowPx: 0.1,         // –æ—Ä–µ–æ–ª
                  color: 0xAEE6FF,
                  glowColor: 0xAEE6FF,
                  coreOpacity: 1.0,
                  glowOpacity: 0.02,
                  glowIntensity: 0.5,
                  jitterAmp: 2,
                  seed: i
                }
              }

              this.scene.pushObject(arc);
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä—É—î –¥–∂–µ—Ä–µ–ª–∞ –¥–∏–º—É –Ω–∞ –∫–∞—Ä—Ç—ñ
     */
    private generateSmoke() {
        const smokeCount = 20; // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–∂–µ—Ä–µ–ª –¥–∏–º—É
        
        for (let i = 0; i < smokeCount; i++) {
            // –í–∏–ø–∞–¥–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –Ω–∞ –∫–∞—Ä—Ç—ñ
            const x = (Math.random() - 0.5) * 150; // X: -200 –¥–æ 200
            const z = (Math.random() - 0.5) * 150; // Z: -200 –¥–æ 200
            
            const smoke: TSceneObject = {
                id: `smoke_source_${i}`,
                type: 'smoke',
                coordinates: { x, y: 0, z }, // Y –±—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ terrain —Å–∏—Å—Ç–µ–º–æ—é
                scale: { x: 1, y: 1, z: 1 },
                rotation: { x: 0, y: 0, z: 0 },
                data: { 
                    intensity: 0.5 + Math.random() * 1.5, // 0.5-2.0 —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å
                    color: 0x84B4543, // —Ç–µ–º–Ω–æ —Å—ñ—Ä–∏–π –¥–∏–º
                    particleCount: 150 + Math.floor(Math.random() * 100), // 150-250 —á–∞—Å—Ç–∏–Ω–æ–∫
                    riseSpeed: 3.3*(0.5 + Math.random() * 0.5), // 1.0-2.5 —à–≤–∏–¥–∫—ñ—Å—Ç—å –ø—ñ–¥–π–æ–º—É
                    spreadRadius: 0.025*(1.0 + Math.random() * 1.0), // 2.0-4.0 —Ä–∞–¥—ñ—É—Å —Ä–æ–∑—Å—ñ—é–≤–∞–Ω–Ω—è
                    lifetime: 5.0 + Math.random() * 3.0, // 5.0-8.0 —á–∞—Å –∂–∏—Ç—Ç—è
                    baseSize: 28,
                    flow: 0.2,
                    noiseScale: 0.5,
                    spreadGrow: 0.05,
                    riseHeight: 5,
                    emitRate: 20,
                    alphaMult: 0.25,
                    alphaDiminish: 0.9,
                },
                tags: ['on-ground', 'static', 'smoke'],
                bottomAnchor: 0,
                terrainAlign: false
            };
            
            // –î–æ–¥–∞—î–º–æ –¥–∂–µ—Ä–µ–ª–æ –¥–∏–º—É
            this.scene.pushObjectWithTerrainConstraint(smoke);
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä—É—î –¥–∂–µ—Ä–µ–ª–∞ –≤–æ–≥–Ω—é –Ω–∞ –∫–∞—Ä—Ç—ñ
     */
    private generateFire() {
        const fireCount = 10; // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–∂–µ—Ä–µ–ª –≤–æ–≥–Ω—é
        
        for (let i = 0; i < fireCount; i++) {
            // –í–∏–ø–∞–¥–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –Ω–∞ –∫–∞—Ä—Ç—ñ
            const x = (Math.random() - 0.5) * 120; // X: -100 –¥–æ 100
            const z = (Math.random() - 0.5) * 120; // Z: -100 –¥–æ 100
            
            const fire: TSceneObject = {
                id: `fire_source_${i}`,
                type: 'fire',
                coordinates: { x, y: 0, z }, // Y –±—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ terrain —Å–∏—Å—Ç–µ–º–æ—é
                scale: { x: 0.1, y: 0.1, z: 0.1 },
                rotation: { x: 0, y: 0, z: 0 },
                data: { 
                    emitRate: 30 + Math.floor(Math.random() * 26), // 20-36 —á–∞—Å—Ç–∏–Ω–æ–∫/—Å–µ–∫
                    life: 2.0 + Math.random() * 1.5, // 2.0-3.5 —Å–µ–∫
                    riseSpeed: 2.0 + Math.random() * 2.0, // 3.0-5.0 –≤–∏—Å–æ—Ç–∞ –ø—ñ–¥–π–æ–º—É (riseSpeed –¥–ª—è FireRenderer)
                    baseSize: 65 + Math.random() * 48, // 5-13 —Ä–æ–∑–º—ñ—Ä —Å–ø—Ä–∞–π—Ç–∞
                    flow: 0.8 + Math.random() * 0.8, // 0.8-1.6 —Å–∏–ª–∞ –∑–∞–≤–∏—Ö—Ä–µ–Ω–Ω—è
                    noiseScale: 0.6 + Math.random() * 0.4, // 0.6-1.0 –º–∞—Å—à—Ç–∞–± —à—É–º—É
                    timeScale: 1.0 + Math.random() * 0.4, // 1.0-1.4 —à–≤–∏–¥–∫—ñ—Å—Ç—å —Ç–µ—á—ñ—ó
                    riseHeight: 1,
                    spreadRadius: 1.5 + 2.2*Math.random(),
                    color: (() => {
                        const colors = [0xFF6600, 0xFF4400, 0xFF8800, 0xFF5500]; // –í—ñ–¥—Ç—ñ–Ω–∫–∏ –ø–æ–º–∞—Ä–∞–Ω—á–µ–≤–æ–≥–æ
                        return colors[Math.floor(Math.random() * colors.length)];
                    })(),
                    spreadGrow: 0,
                    tongueBoost: 1.8,
                    tongueSharpness: 2,
                },
                tags: ['on-ground', 'static', 'fire'],
                bottomAnchor: 0,
                terrainAlign: false
            };
            
            // –î–æ–¥–∞—î–º–æ –¥–∂–µ—Ä–µ–ª–æ –≤–æ–≥–Ω—é
            this.scene.pushObjectWithTerrainConstraint(fire);
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä—É—î rover –æ–±'—î–∫—Ç–∏ –±—ñ–ª—è —Ü–µ–Ω—Ç—Ä—É –∫–∞—Ä—Ç–∏
     */
    private generateRovers() {
        const roverCount = 3; // –ö—ñ–ª—å–∫—ñ—Å—Ç—å rover –æ–±'—î–∫—Ç—ñ–≤
        
        // –†–æ–∑—Ç–∞—à–æ–≤—É—î–º–æ rover –æ–±'—î–∫—Ç–∏ –±—ñ–ª—è —Ü–µ–Ω—Ç—Ä—É –∫–∞—Ä—Ç–∏
        const centerRadius = 20; // –†–∞–¥—ñ—É—Å –≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É
        
        for (let i = 0; i < roverCount; i++) {
            let attempts = 0;
            const maxAttempts = 50; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –∑–Ω–∞–π—Ç–∏ –≤—ñ–ª—å–Ω—É –ø–æ–∑–∏—Ü—ñ—é
            let x, z;
            
            // –®—É–∫–∞—î–º–æ –≤—ñ–ª—å–Ω—É –ø–æ–∑–∏—Ü—ñ—é –±–µ–∑ –∫–æ–ª—ñ–∑—ñ–π –∑ –∫–∞–º–µ–Ω—é–∫–∞–º–∏ (rock —Ç–∞ boulder)
            do {
                // –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –ø–æ –∫–æ–ª—É –Ω–∞–≤–∫–æ–ª–æ —Ü–µ–Ω—Ç—Ä—É
                const angle = (i / roverCount) * Math.PI * 2 + (Math.random() - 0.5) * 0.5; // –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ—Å—Ç—å
                const distance = centerRadius * (0.5 + Math.random() * 0.5); // –í—ñ–¥ 10 –¥–æ 30 –æ–¥–∏–Ω–∏—Ü—å –≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É
                
                x = Math.cos(angle) * distance;
                z = Math.sin(angle) * distance;
                
                attempts++;
            } while (this.isPositionOccupiedByRock(x, z) && attempts < maxAttempts);
            
            // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –≤—ñ–ª—å–Ω—É –ø–æ–∑–∏—Ü—ñ—é, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é —Å–ø—Ä–æ–±—É
            if (attempts >= maxAttempts) {
                console.warn(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤—ñ–ª—å–Ω—É –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è rover ${i}, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é —Å–ø—Ä–æ–±—É`);
            }
            
            // –í–∏–ø–∞–¥–∫–æ–≤–∏–π –º–∞—Å—à—Ç–∞–± –¥–ª—è —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ
            const scale = 0.4;
            
                         const rover: TSceneObject = {
                 id: `rover_${i}`,
                 type: 'rover',
                 coordinates: { x, y: 0, z }, // Y –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ terrain —Å–∏—Å—Ç–µ–º–æ—é
                 scale: { x: scale, y: scale, z: scale },
                 rotation: { 
                     x: 0, 
                     y: Math.atan2(z, x) + Math.random() * 0.5 + (Math.PI / 2), // –ù–∞–ø—Ä–∞–≤–ª—è—î–º–æ –≤ —Å—Ç–æ—Ä–æ–Ω—É –≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É + –∫–æ—Ä–µ–∫—Ü—ñ—è –∫—É—Ç–∞
                     z: 0 
                 },
                                   data: { 
                      modelPath: '/models/playtest-rover.glb', // –®–ª—è—Ö –≤—ñ–¥–Ω–æ—Å–Ω–æ public –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
                      scale: scale,
                      maxSpeed: 2.0, // –ë–∞–∑–æ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å —Ä—É—Ö—É
                      rotatable: true, // –†–æ–≤–µ—Ä –º–æ–∂–µ –æ–±–µ—Ä—Ç–∞—Ç–∏—Å—è –≤ –Ω–∞–ø—Ä—è–º–∫—É —Ä—É—Ö—É
                      rotationOffset: -Math.PI / 2 // –ö–æ—Ä–µ–∫—Ü—ñ—è –∫—É—Ç–∞ (90 –≥—Ä–∞–¥—É—Å—ñ–≤) - –º–æ–¥–µ–ª—å –¥–∏–≤–∏—Ç—å—Å—è –≤ —Å—Ç–æ—Ä–æ–Ω—É –æ—Å—ñ Z
                  },
                 tags: ['on-ground', 'dynamic', 'rover', 'controlled'], // –î–∏–Ω–∞–º—ñ—á–Ω–∏–π –æ–±'—î–∫—Ç –Ω–∞ terrain, —è–∫–∏–π –º–æ–∂–Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏
                 bottomAnchor: -0.1, // Rover —Å—Ç–æ—ó—Ç—å –Ω–∞ —Å–≤–æ—î–º—É –Ω–∏–∑—É
                 terrainAlign: true // –ù–∞—Ö–∏–ª—è—î—Ç—å—Å—è –ø–æ –Ω–æ—Ä–º–∞–ª—ñ terrain
             };
            
            // –î–æ–¥–∞—î–º–æ –∑ terrain constraint
            const success = this.scene.pushObjectWithTerrainConstraint(rover);
            if (success) {
                                 // –î–æ–¥–∞–Ω–æ rover
            }
        }
    }

    private lastExplosionTime = 0;
    private explosionInterval = 3000; // 5 —Å–µ–∫—É–Ω–¥ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö

    tick() {
        const dT = 0.1;
        this.processSceneTick(dT);
        this.dynamics.moveObjects(dT);
        
        // –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—ñ –≤–∏–±—É—Ö–∏ –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
        const currentTime = performance.now();
        if (currentTime - this.lastExplosionTime >= this.explosionInterval) {
            this.generateRandomExplosion();
            this.lastExplosionTime = currentTime;
        }
    }

    processSceneTick(_dT: number) {
        // contains custom logic, managing objects, custom structures and so on...
        const testMovingObj = this.scene.getObjectById('dynamic_test_cube');
        if(testMovingObj && !testMovingObj.data?.target) {
            // –¢—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ–º–∞—î —Ü—ñ–ª—ñ - –¥–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—É –∞–Ω—ñ–º–∞—Ü—ñ—é
            if(!testMovingObj.speed) {
                testMovingObj.speed = {x: 0, y: 0, z: 0}
            }
            testMovingObj.speed.x += Math.cos(testMovingObj.coordinates.x*Math.PI);
        }
        
        // –õ–æ–≥—ñ–∫–∞ —Ä—É—Ö—É –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤
        this.processDynamicObjectsMovement(_dT);
    }
    
    /**
     * –†–æ–∑–ø–æ–¥—ñ–ª—è—î —Ü—ñ–ª—ñ –¥–ª—è –≥—Ä—É–ø–∏ –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤, —â–æ–± –≤–æ–Ω–∏ –Ω–µ –∑–ª–∏–ø–∞–ª–∏—Å—è
     */
    public distributeTargetsForObjects(objectIds: string[], centerPoint: { x: number; z: number }) {
        const dynamicObjects = objectIds
            .map(id => this.scene.getObjectById(id))
            .filter(obj => obj && obj.tags?.includes('dynamic')) as TSceneObject[];
        
        if (dynamicObjects.length === 0) return;
        
        // –Ø–∫—â–æ —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω –æ–±'—î–∫—Ç - –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ü—ñ–ª—å
        if (dynamicObjects.length === 1) {
            const obj = dynamicObjects[0];
            const objData = obj.data as any;
            if (objData) {
                objData.target = { x: centerPoint.x, z: centerPoint.z };
                                 // –û–±'—î–∫—Ç –æ—Ç—Ä–∏–º–∞–≤ —Ü—ñ–ª—å
            }
            return;
        }
        
        // –î–ª—è –∫—ñ–ª—å–∫–æ—Ö –æ–±'—î–∫—Ç—ñ–≤ - —Ä–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –ø–æ –∫–æ–ª—É –Ω–∞–≤–∫–æ–ª–æ —Ü–µ–Ω—Ç—Ä—É
        const radius = Math.min(dynamicObjects.length * 0.8, 10); // –†–∞–¥—ñ—É—Å –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –æ–±'—î–∫—Ç—ñ–≤
        const angleStep = (2 * Math.PI) / dynamicObjects.length;
        
        dynamicObjects.forEach((obj, index) => {
            const objData = obj.data as any;
            if (!objData) return;
            
            // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –Ω–∞ –∫–æ–ª—ñ
            const angle = index * angleStep;
            const targetX = centerPoint.x + Math.cos(angle) * radius;
            const targetZ = centerPoint.z + Math.sin(angle) * radius;
            
            // –ö–æ—Ä–∏–≥—É—î–º–æ –≤–∏—Å–æ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ terrain
            const terrainManager = this.scene.getTerrainManager();
            if (terrainManager) {
                const terrainHeight = terrainManager.getHeightAt(targetX, targetZ);
                if (terrainHeight !== undefined) {
                    // targetY = terrainHeight; // –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ
                }
            }
            
            objData.target = { x: targetX, z: targetZ };
                         // –û–±'—î–∫—Ç –æ—Ç—Ä–∏–º–∞–≤ —Ü—ñ–ª—å
        });
    }

    /**
     * –ì–µ–Ω–µ—Ä—É—î –ø–∏–ª–æ–≤—ñ —Ö–º–∞—Ä–∏ –Ω–∞ –∑–µ–º–ª—ñ
     */
    private generateClouds() {
        const cloudCount = 5; // –ó–ë–Ü–õ–¨–®–£–Ñ–ú–û –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–º–∞—Ä
        
        for (let i = 0; i < cloudCount; i++) {
            // –ì–ï–ù–ï–†–£–Ñ–ú–û –í–ò–ü–ê–î–ö–û–í–Ü –ö–û–û–†–î–ò–ù–ê–¢–ò –¥–ª—è –∫–æ–∂–Ω–æ—ó —Ö–º–∞—Ä–∏
            const x = (Math.random() - 0.5) * 400; // X: -200 –¥–æ 200
            const z = (Math.random() - 0.5) * 400; // Z: -200 –¥–æ 200
            
            const cloud: TSceneObject = {
                id: `dust_cloud_${i}`,
                type: 'cloud',
                coordinates: { x, y: 0, z }, // Y –±—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ terrain —Å–∏—Å—Ç–µ–º–æ—é
                scale: { x: 1, y: 1, z: 1 },
                rotation: { x: 0, y: 0, z: 0 },
                data: { 
                    size: 21 + Math.random() * 22, // 8-20 –æ–¥–∏–Ω–∏—Ü—å —Ä–∞–¥—ñ—É—Å (–±—ñ–ª—å—à—ñ —Ö–º–∞—Ä–∏)
                    color: 0xD2B46C, // –ü—ñ—Å–æ—á–Ω–∏–π –∫–æ–ª—ñ—Ä
                    particleCount: 200, //13200 + Math.floor(Math.random() * 18000), // 1200-2000 —á–∞—Å—Ç–∏–Ω–æ–∫ –Ω–∞ —Ö–º–∞—Ä—É (–ó–ë–Ü–õ–¨–®–£–Ñ–ú–û!)
                    windSpeed: 0.3 + Math.random() * 0.7, // 0.3-1.0 —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É
                    height: 4 + Math.random() * 8 // 4-12 –æ–¥–∏–Ω–∏—Ü—å –≤–∏—Å–æ—Ç–∏
                },
                tags: ['on-ground', 'static', 'dust'], // –ü–∏–ª–æ–≤—ñ —Ö–º–∞—Ä–∏ –Ω–∞ –∑–µ–º–ª—ñ
                bottomAnchor: -1, // –ù–µ –≤–∞–∂–ª–∏–≤–æ –¥–ª—è —Ö–º–∞—Ä
                terrainAlign: false // –•–º–∞—Ä–∏ –Ω–µ –≤–∏—Ä—ñ–≤–Ω—é—é—Ç—å—Å—è –ø–æ terrain
            };
            
            // –î–æ–¥–∞—î–º–æ –ø–∏–ª–æ–≤—É —Ö–º–∞—Ä—É
            this.scene.pushObject(cloud);
        }
    
}

    /**
     * –û–±—Ä–æ–±–ª—è—î —Ä—É—Ö –≤—Å—ñ—Ö –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤
     */
    private processDynamicObjectsMovement(dT: number) {
        const dynamicObjects = this.scene.getObjectsByTag('dynamic');
        
        dynamicObjects.forEach(obj => {
            const objData = obj.data as any;
            if (!objData || !objData.target) return;
            
            const target = objData.target;
            const maxSpeed = objData.maxSpeed || 2.0;
            
            // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—ñ–¥—Å—Ç–∞–Ω—å –¥–æ —Ü—ñ–ª—ñ
            const distanceToTarget = Math.sqrt(
                Math.pow(obj.coordinates.x - target.x, 2) + 
                Math.pow(obj.coordinates.z - target.z, 2)
            );
            
            // –Ø–∫—â–æ –¥–æ—Å—è–≥–ª–∏ —Ü—ñ–ª—ñ - –∑—É–ø–∏–Ω—è—î–º–æ—Å—è
            if (distanceToTarget < 0.5) {
                                 // –û–±'—î–∫—Ç –¥–æ—Å—è–≥ —Ü—ñ–ª—ñ
                objData.target = undefined; // –í–∏–¥–∞–ª—è—î–º–æ —Ü—ñ–ª—å
                if (obj.speed) {
                    obj.speed.x = 0;
                    obj.speed.z = 0;
                    // –î–ª—è on-ground –æ–±'—î–∫—Ç—ñ–≤ Y —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞–≤–∂–¥–∏ 0
                    if (obj.tags?.includes('on-ground')) {
                        obj.speed.y = 0;
                    }
                }
                
                // –í–∏–¥–∞–ª—è—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ü—ñ–ª—ñ (—è–∫—â–æ —î SelectionManager)
                // –¶–µ –±—É–¥–µ –∑—Ä–æ–±–ª–µ–Ω–æ –≤ Scene3D –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ
                return;
            }
            
            // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –Ω–∞–ø—Ä—è–º–æ–∫ –¥–æ —Ü—ñ–ª—ñ
            const directionX = target.x - obj.coordinates.x;
            const directionZ = target.z - obj.coordinates.z;
            const directionLength = Math.sqrt(directionX * directionX + directionZ * directionZ);
            
            // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–ø—Ä—è–º–æ–∫
            const normalizedDirectionX = directionX / directionLength;
            const normalizedDirectionZ = directionZ / directionLength;
            
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å
            if (!obj.speed) {
                obj.speed = { x: 0, y: 0, z: 0 };
            }
            
            obj.speed.x = normalizedDirectionX * maxSpeed;
            obj.speed.z = normalizedDirectionZ * maxSpeed;
            
            // –î–ª—è on-ground –æ–±'—î–∫—Ç—ñ–≤ Y —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞–≤–∂–¥–∏ 0 (–Ω–µ –ª—ñ—Ç–∞—é—Ç—å)
            if (obj.tags?.includes('on-ground')) {
                obj.speed.y = 0;
            }
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –≤ –Ω–∞–ø—Ä—è–º–∫—É —Ä—É—Ö—É (—è–∫—â–æ —Ü–µ —Ä–æ–≤–µ—Ä –∞–±–æ —ñ–Ω—à–∏–π –æ–±'—î–∫—Ç —â–æ –º–æ–∂–µ –æ–±–µ—Ä—Ç–∞—Ç–∏—Å—è)
            if (objData.rotatable !== false) {
                const baseRotation = Math.atan2(normalizedDirectionZ, normalizedDirectionX);
                const rotationOffset = objData.rotationOffset || 0;
                obj.rotation.y = -(baseRotation + rotationOffset);
            }
            
                         // –û–±'—î–∫—Ç —Ä—É—Ö–∞—î—Ç—å—Å—è –¥–æ —Ü—ñ–ª—ñ
        });
    }

         /**
      * –ì–µ–Ω–µ—Ä—É—î –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ñ –≤–∏–±—É—Ö–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ
      */
     private generateExplosions() {
         const explosionCount = 8; // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–±—É—Ö—ñ–≤ –Ω–∞ –∫–∞—Ä—Ç—ñ

         for (let i = 0; i < explosionCount; i++) {
             // –í–∏–ø–∞–¥–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –Ω–∞ –∫–∞—Ä—Ç—ñ
             const x = (Math.random() - 0.5) * 100; // X: -150 –¥–æ 150
             const z = (Math.random() - 0.5) * 100; // Z: -150 –¥–æ 150
             const y = 2 + Math.random() * 8; // Y: 2-10 (–≤–∏–±—É—Ö–∏ –≤ –ø–æ–≤—ñ—Ç—Ä—ñ)
             
             const explosion: TSceneObject = {
                 id: `explosion_${i}`,
                 type: 'explosion',
                 coordinates: { x, y, z },
                 scale: { x: 1, y: 1, z: 1 },
                 rotation: { x: 0, y: 0, z: 0 },
                 data: { 
                     particleSize: 24 + Math.random() * 32, // 24-56 px —Ä–æ–∑–º—ñ—Ä —á–∞—Å—Ç–∏–Ω–æ–∫
                     velocity: 12 + Math.random() * 18, // 12-30 –º/—Å —à–≤–∏–¥–∫—ñ—Å—Ç—å —Ä–æ–∑–ª—å–æ—Ç—É
                     particleCount: 800 + Math.floor(Math.random() * 1200), // 800-2000 —á–∞—Å—Ç–∏–Ω–æ–∫
                     hue: 15 + Math.random() * 45, // 15-60 (–≤—ñ–¥—Ç—ñ–Ω–∫–∏ –æ—Ä–∞–Ω–∂–µ–≤–æ–≥–æ/—á–µ—Ä–≤–æ–Ω–æ–≥–æ)
                     alpha: 0.7 + Math.random() * 0.3 // 0.7-1.0 –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å
                 },
                 tags: ['static', 'explosion'],
                 bottomAnchor: 0,
                 terrainAlign: false
             };
             
             // –î–æ–¥–∞—î–º–æ –≤–∏–±—É—Ö
             this.scene.pushObject(explosion);
         }
     }

     /**
      * –ì–µ–Ω–µ—Ä—É—î –æ–¥–∏–Ω –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—É—Ö –∑ TTL 3 —Å–µ–∫—É–Ω–¥–∏
      */
     private generateRandomExplosion() {
         // –í–∏–ø–∞–¥–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –Ω–∞ –∫–∞—Ä—Ç—ñ
         const x = (Math.random() - 0.5) * 100; // X: -100 –¥–æ 100
         const z = (Math.random() - 0.5) * 100; // Z: -100 –¥–æ 100
         const y = 13 + Math.random() * 12; // Y: 3-15 (–≤–∏–±—É—Ö–∏ –≤ –ø–æ–≤—ñ—Ç—Ä—ñ)
         
         // –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ –≤–∏–±—É—Ö—É
         const explosionId = `dynamic_explosion_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
         
         const explosion: TSceneObject = {
             id: explosionId,
             type: 'explosion',
             coordinates: { x, y, z },
             scale: { x: 1, y: 1, z: 1 },
             rotation: { x: 0, y: 0, z: 0 },
             data: { 
                 particleSize: 28 + Math.random() * 40, // 28-68 px —Ä–æ–∑–º—ñ—Ä —á–∞—Å—Ç–∏–Ω–æ–∫
                 velocity: 3 + Math.random() * 4, // 15-35 –º/—Å —à–≤–∏–¥–∫—ñ—Å—Ç—å —Ä–æ–∑–ª—å–æ—Ç—É
                 particleCount: 500 + Math.floor(Math.random() * 500), // 1000-2500 —á–∞—Å—Ç–∏–Ω–æ–∫
                 hue: 10 + Math.random() * 40, // 20-70 (–≤—ñ–¥—Ç—ñ–Ω–∫–∏ –æ—Ä–∞–Ω–∂–µ–≤–æ–≥–æ/—á–µ—Ä–≤–æ–Ω–æ–≥–æ/–∂–æ–≤—Ç–æ–≥–æ)
                 alpha: 0.8 + Math.random() * 0.2, // 0.8-1.0 –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å
                 ttl: 2.0, // TTL 3 —Å–µ–∫—É–Ω–¥–∏
                 life: 1.5, // –ñ–∏—Ç—Ç—è —á–∞—Å—Ç–∏–Ω–∫–∏ 2.5 —Å–µ–∫—É–Ω–¥–∏
                 spreadRadius: 1.0 + Math.random() * 1.0, // 3-7 –º —Ä–∞–¥—ñ—É—Å —Ä–æ–∑–ª—å–æ—Ç—É
                 gravity: 5.0, // –ë–µ–∑ –≥—Ä–∞–≤—ñ—Ç–∞—Ü—ñ—ó (—Ä–∞–¥—ñ–∞–ª—å–Ω–∏–π —Ä–æ–∑–ª—ñ—Ç)
                 drag: 0.3 + Math.random() * 0.3, // 0.3-0.6 –æ–ø—ñ—Ä –ø–æ–≤—ñ—Ç—Ä—è
                 turbulence: 0.4 + Math.random() * 0.4, // 0.4-0.8 —Ç—É—Ä–±—É–ª–µ–Ω—Ç–Ω—ñ—Å—Ç—å
                 sparkFrac: 0.2 + Math.random() * 0.3, // 0.2-0.5 –¥–æ–ª—è —ñ—Å–∫–æ—Ä–æ–∫
                 flashLife: 2, // 0.2-0.5 —Å–µ–∫ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Å–ø–∞–ª–∞—Ö—É
                 flashSizePx: 60 + Math.random() * 40, // 120-200 px —Ä–æ–∑–º—ñ—Ä —Å–ø–∞–ª–∞—Ö—É
                 flashIntensity: 3.2 + Math.random() * 4.8 // 1.2-2.0 —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å —Å–ø–∞–ª–∞—Ö—É
             },
             tags: ['dynamic', 'explosion'],
             bottomAnchor: 0,
             terrainAlign: false
         };
         
         // –î–æ–¥–∞—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –≤–∏–±—É—Ö
         this.scene.pushObject(explosion);
         
         console.log(`üí• MapLogic: –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –≤–∏–±—É—Ö ${explosionId} –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó (${x.toFixed(1)}, ${y.toFixed(1)}, ${z.toFixed(1)}) –∑ TTL 3 —Å–µ–∫`);
     }

}