import * as THREE from 'three';
import { BaseRenderer, SceneObject } from './BaseRenderer';

export interface CloudData {
    color?: number;
    size?: number;
    density?: number;
    height?: number;
    particleCount?: number; // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—Å—Ç–∏–Ω–æ–∫ –≤ —Ö–º–∞—Ä—ñ
    windSpeed?: number; // –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É
}

export class CloudRenderer extends BaseRenderer {
    private dustParticles: THREE.Points[] = []; // –ú–∞—Å–∏–≤ –ø–∏–ª–æ–≤–∏—Ö —Ö–º–∞—Ä
    private cloudGroup: THREE.Group;
    private clock: THREE.Clock;

    constructor(scene: THREE.Scene) {
        super(scene);
        this.cloudGroup = new THREE.Group();
        this.cloudGroup.name = 'CloudGroup';
        this.clock = new THREE.Clock();
        this.scene.add(this.cloudGroup);
        console.log('üöÄ CloudRenderer —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    }

    render(object: SceneObject): THREE.Object3D {
        const cloudData: CloudData = object.data || {};
        console.log(`‚òÅÔ∏è CloudRenderer.render() –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è ${object.id}, —Ç–∏–ø: ${object.type}: [${object.coordinates.x},${object.coordinates.y},${object.coordinates.z}]`);
        
        // –¢–ï–°–¢: –°–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ—Å—Ç–∏–π —à–µ–π–¥–µ—Ä
        const dustCloud = this.createSimpleShaderCloud(cloudData, object.coordinates);
        console.log(`‚òÅÔ∏è –•–º–∞—Ä–∞ ${object.id} —Å—Ç–≤–æ—Ä–µ–Ω–∞, –¥–æ–¥–∞—î–º–æ –¥–æ —Å—Ü–µ–Ω–∏`);
        
        this.dustParticles.push(dustCloud);
        this.cloudGroup.add(dustCloud);
        
        // –î–æ–¥–∞—î–º–æ –¥–æ BaseRenderer –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
        this.addMesh(object.id, dustCloud);
        
        return dustCloud;
    }

    private createSimpleShaderCloud(cloudData: CloudData, coordinates: { x: number; y: number; z: number }): THREE.Points {
        const particleCount = cloudData.particleCount || 500; // –ó–ë–Ü–õ–¨–®–£–Ñ–ú–û –¥–æ 500 —á–∞—Å—Ç–∏–Ω–æ–∫
        const size = cloudData.size || 20; // –†–∞–¥—ñ—É—Å —Ö–º–∞—Ä–∏
        const height = cloudData.height || 5; // –í–∏—Å–æ—Ç–∞ —Ö–º–∞—Ä–∏
        
                 // –°—Ç–≤–æ—Ä—é—î–º–æ –≥–µ–æ–º–µ—Ç—Ä—ñ—é –¥–ª—è —á–∞—Å—Ç–∏–Ω–æ–∫
         const geometry = new THREE.BufferGeometry();
         const radii = new Float32Array(particleCount);      // –†–∞–¥—ñ—É—Å–∏ —á–∞—Å—Ç–∏–Ω–æ–∫
         const angles = new Float32Array(particleCount);     // –ö—É—Ç–∏ —á–∞—Å—Ç–∏–Ω–æ–∫
         const heights = new Float32Array(particleCount);    // –í–∏—Å–æ—Ç–∏ —á–∞—Å—Ç–∏–Ω–æ–∫
         const colors = new Float32Array(particleCount * 3);
         const blurFactors = new Float32Array(particleCount); // –§–∞–∫—Ç–æ—Ä —Ä–æ–∑–º–∏—Ç–æ—Å—Ç—ñ (0.5-2.0)
         
         // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–ª—ñ—Ä –∑ –¥–∞–Ω–∏—Ö –∞–±–æ –ø—ñ—Å–æ—á–Ω–∏–π –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
         const baseColor = new THREE.Color(cloudData.color || 0xD2B48C);
        
        for (let i = 0; i < particleCount; i++) {
            // –ë–Ü–õ–¨–® –ü–†–ò–†–û–î–ù–ò–ô —Ä–æ–∑–ø–æ–¥—ñ–ª —á–∞—Å—Ç–∏–Ω–æ–∫ (–∫—É–±—ñ—á–Ω–∏–π –∫–æ—Ä—ñ–Ω—å + –∫–ª–∞—Å—Ç–µ—Ä–∏)
            
            // –í–∏–ø–∞–¥–∫–æ–≤–∏–π –∫—É—Ç
            const angle = Math.random() * Math.PI * 2;
            
                         // –†–ê–î–Ü–ê–õ–¨–ù–ò–ô –†–û–ó–ü–û–î–Ü–õ: –º–µ–Ω—à–µ —á–∞—Å—Ç–∏–Ω–æ–∫ –±—ñ–ª—è –∫—Ä–∞—ó–≤, –±—ñ–ª—å—à–µ –≤ —Ü–µ–Ω—Ç—Ä—ñ
             const radialDistribution = Math.pow(Math.random(), 1.5); // –ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª –¥–ª—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—ó –≤ —Ü–µ–Ω—Ç—Ä—ñ
             const radius = radialDistribution * size;
             
             // –í–∏—Å–æ—Ç–∞ –∑ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏ (–±—ñ–ª—å—à–µ —á–∞—Å—Ç–∏–Ω–æ–∫ –≤–Ω–∏–∑—É —Ç–∞ –≤–≥–æ—Ä—ñ)
             let heightOffset;
             if (Math.random() < 0.1) {
                 // 10% —á–∞—Å—Ç–∏–Ω–æ–∫ –≤–Ω–∏–∑—É (0-20% –≤–∏—Å–æ—Ç–∏)
                 heightOffset = Math.random() * height * 0.2;
             } else if (Math.random() < 0.2) {
                 // 10% —á–∞—Å—Ç–∏–Ω–æ–∫ –≤–≥–æ—Ä—ñ (80-100% –≤–∏—Å–æ—Ç–∏)
                 heightOffset = height * 0.8 + Math.random() * height * 0.2;
             } else {
                 // 80% —á–∞—Å—Ç–∏–Ω–æ–∫ –≤ —Ü–µ–Ω—Ç—Ä—ñ (20-80% –≤–∏—Å–æ—Ç–∏) - –±—ñ–ª—å—à–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—ó
                 heightOffset = height * 0.2 + Math.random() * height * 0.6;
             }
             
                          // –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ –∑–º—ñ—â–µ–Ω–Ω—è –¥–ª—è –±—ñ–ª—å—à–æ—ó –ø—Ä–∏—Ä–æ–¥–Ω–æ—Å—Ç—ñ
             const randomOffset = (Math.random() - 0.5) * size * 0.3;
 
             // –†–∞–¥—ñ–∞–ª—å–Ω–∏–π –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç: –º–µ–Ω—à–µ —á–∞—Å—Ç–∏–Ω–æ–∫ –±—ñ–ª—è –∫—Ä–∞—ó–≤
             const hToRadOff = 0.2 + 0.8*Math.sin(heightOffset*Math.PI/height);
             
             // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ª—è—Ä–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —á–∞—Å—Ç–∏–Ω–∫–∏
             radii[i] = radius * hToRadOff + randomOffset;  // –†–∞–¥—ñ—É—Å –∑ –≤–∞—Ä—ñ–∞—Ü—ñ—î—é
             angles[i] = angle;                             // –ö—É—Ç —á–∞—Å—Ç–∏–Ω–∫–∏
             heights[i] = heightOffset;                     // –í–∏—Å–æ—Ç–∞ —á–∞—Å—Ç–∏–Ω–∫–∏
            
                         // –í–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–æ–ª—ñ—Ä (–≤—ñ–¥—Ç—ñ–Ω–∫–∏ –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–ª—å–æ—Ä—É)
             const colorVariation = 0.7 + Math.random() * 0.6; // 0.7-1.3
             colors[i * 3] = baseColor.r * colorVariation;     // R
             colors[i * 3 + 1] = baseColor.g * colorVariation; // G
             colors[i * 3 + 2] = baseColor.b * colorVariation; // B
             
             // –§–ê–ö–¢–û–† –†–û–ó–ú–ò–¢–û–°–¢–Ü: –≤—ñ–¥ 0.5 –¥–æ 2.0
             blurFactors[i] = 0.2 + Math.random() * 1.5; // 0.5-2.0
             
             // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∫—É—Ç —á–∞—Å—Ç–∏–Ω–∫–∏!
             angles[i] = angle;
         }

         console.log('Cloud created: ', cloudData);
        
                 // –î–æ–¥–∞—î–º–æ position –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —à–µ–π–¥–µ—Ä–æ–º
         const positions = new Float32Array(particleCount * 3);
         for (let i = 0; i < particleCount; i++) {
             positions[i * 3] = radii[i] * Math.cos(angles[i]);     // X
             positions[i * 3 + 1] = heights[i];                     // Y  
             positions[i * 3 + 2] = radii[i] * Math.sin(angles[i]); // Z
         }
         
         geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3)); // –û–ë–û–í'–Ø–ó–ö–û–í–û!
         geometry.setAttribute('radius', new THREE.BufferAttribute(radii, 1));      // –†–∞–¥—ñ—É—Å–∏
         geometry.setAttribute('angle', new THREE.BufferAttribute(angles, 1));     // –ö—É—Ç–∏
         geometry.setAttribute('height', new THREE.BufferAttribute(heights, 1));   // –í–∏—Å–æ—Ç–∏
         geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
         geometry.setAttribute('blurFactor', new THREE.BufferAttribute(blurFactors, 1)); // –§–∞–∫—Ç–æ—Ä —Ä–æ–∑–º–∏—Ç–æ—Å—Ç—ñ
        
        // –ü–û–ö–†–ê–©–ï–ù–ò–ô —à–µ–π–¥–µ—Ä –∑ —à—É–º–æ–º —Ç–∞ –∫—Ä–∞—â–∏–º–∏ –µ—Ñ–µ–∫—Ç–∞–º–∏
                 const vertexShader = `
             uniform float uTime;
             attribute float radius;   // –†–∞–¥—ñ—É—Å —á–∞—Å—Ç–∏–Ω–∫–∏
             attribute float angle;    // –ö—É—Ç —á–∞—Å—Ç–∏–Ω–∫–∏
             attribute float height;   // –í–∏—Å–æ—Ç–∞ —á–∞—Å—Ç–∏–Ω–∫–∏
             attribute float blurFactor; // –§–∞–∫—Ç–æ—Ä —Ä–æ–∑–º–∏—Ç–æ—Å—Ç—ñ (0.5-2.0)
             varying float vAlpha;
             varying vec3 vColor;
             varying float vBlurFactor; // –ü–µ—Ä–µ–¥–∞—î–º–æ –≤ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–Ω–∏–π —à–µ–π–¥–µ—Ä
             
             // –ü—Ä–æ—Å—Ç–∏–π hash –¥–ª—è —à—É–º—É
             float hash(float n) {
                 return fract(sin(n) * 43758.5453);
             }
            
            // –ü—Ä–æ—Å—Ç–∏–π —à—É–º
            float noise(vec3 p) {
                vec3 i = floor(p);
                vec3 f = fract(p);
                f = f * f * (3.0 - 2.0 * f);
                
                float n = i.x + i.y * 57.0 + i.z * 113.0;
                return mix(mix(mix(hash(n), hash(n + 1.0), f.x),
                           mix(hash(n + 57.0), hash(n + 58.0), f.x), f.y),
                         mix(mix(hash(n + 113.0), hash(n + 114.0), f.x),
                           mix(hash(n + 170.0), hash(n + 171.0), f.x), f.y), f.z);
            }
            
            void main() {
                // –û–±—á–∏—Å–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∑ –ø–æ–ª—è—Ä–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                vec3 pos = vec3(
                    radius * cos(angle),     // X –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∫—É—Ç–∞
                    height,                  // Y –±–µ–∑ –∑–º—ñ–Ω
                    radius * sin(angle)      // Z –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∫—É—Ç–∞
                );
                
                // –ú–Ü–ù–Ü–ú–ê–õ–¨–ù–ò–ô —à—É–º –¥–ª—è –ø—Ä–∏—Ä–æ–¥–Ω–æ—Å—Ç—ñ (–±–µ–∑ –≤–±–∏–≤–∞–Ω–Ω—è FPS)
                float noiseValue = noise(pos * 0.2 + uTime * 0.05);
                pos.x += noiseValue * 0.1; // –ó–º–µ–Ω—à—É—î–º–æ –≤ 3 —Ä–∞–∑–∏
                pos.z += noiseValue * 0.1; // –ó–º–µ–Ω—à—É—î–º–æ –≤ 3 —Ä–∞–∑–∏
                
                // –°–ü–†–ê–í–ñ–ù–Ñ –ó–ê–ö–†–£–ß–£–í–ê–ù–ù–Ø –î–û–í–ö–û–õ–ê –í–ï–†–¢–ò–ö–ê–õ–¨–ù–û–á –û–°–Ü! üå™Ô∏è
                float rotationAngle = uTime * 2.0; // –®–≤–∏–¥–∫–µ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è!
                
                // –ù–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –ø—ñ—Å–ª—è –æ–±–µ—Ä—Ç–∞–Ω–Ω—è
                pos.x = radius * cos(angle + rotationAngle);
                pos.z = radius * sin(angle + rotationAngle);
                
                // –õ–µ–≥–∫–µ –ø—ñ–¥–Ω—è—Ç—Ç—è/–æ–ø—É—Å–∫–∞–Ω–Ω—è
                pos.y += sin(uTime * 0.7 + pos.x * 0.2) * 0.2;
                
                                 // –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –∞–ª—å—Ñ–∞: –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É —Ç–∞ –≤–∏—Å–æ—Ç–∏ + blurFactor
                 float distFromCenter = length(pos.xz);
                 float heightAlpha = 1.0 - (pos.y / 5.0) * 0.3;
                 float centerAlpha = 1.0 - (distFromCenter / 8.0) * 0.2;
                 vAlpha = heightAlpha * centerAlpha * blurFactor; // –ú–Ω–æ–∂–∏–º–æ –Ω–∞ blurFactor
                 
                 // –ü–µ—Ä–µ–¥–∞—î–º–æ –∫–æ–ª—ñ—Ä —Ç–∞ blurFactor
                 vColor = vec3(0.7, 0.4, 0.2); // –¢–µ–º–Ω—ñ—à–∏–π –∫–æ—Ä–∏—á–Ω–µ–≤–∏–π
                 vBlurFactor = blurFactor; // –ü–µ—Ä–µ–¥–∞—î–º–æ –≤ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–Ω–∏–π —à–µ–π–¥–µ—Ä
                 
                 vec4 mvPos = modelViewMatrix * vec4(pos, 1.0);
                 gl_PointSize = 80.0 / blurFactor; // –î—ñ–ª–∏–º–æ —Ä–æ–∑–º—ñ—Ä –Ω–∞ blurFactor
                 gl_Position = projectionMatrix * mvPos;
            }
        `;
        
                 const fragmentShader = `
             precision mediump float;
             varying float vAlpha;
             varying vec3 vColor;
             varying float vBlurFactor; // –§–∞–∫—Ç–æ—Ä —Ä–æ–∑–º–∏—Ç–æ—Å—Ç—ñ
             
                          void main() {
                  vec2 uv = gl_PointCoord - 0.5;
                  float r = length(uv);
                  
                  // –ö–†–£–ì–õ–Ü —á–∞—Å—Ç–∏–Ω–∫–∏ –∑ –ø–ª–∞–≤–Ω–∏–º–∏ –∫—Ä–∞—è–º–∏ + blurFactor
                  float soft = smoothstep(0.5, 0.0, r); // –ë—ñ–ª—å—à —Ä—ñ–∑–∫–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –¥–ª—è –∫—Ä—É–≥–ª–æ—Å—Ç—ñ
                  
                  // –î–æ–¥–∞—î–º–æ –≤–∞—Ä—ñ–∞—Ü—ñ—é –∫–æ–ª—å–æ—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–∑–∏—Ü—ñ—ó
                  vec3 baseColor = vColor;
                  vec3 colorVariation = vec3(0.15, 0.08, 0.05);
                  vec3 finalColor = baseColor + colorVariation * (uv.x + uv.y);
                  
                  // –î–æ–¥–∞—î–º–æ –ª–µ–≥–∫—É –≤–∞—Ä—ñ–∞—Ü—ñ—é —Ä–æ–∑–º—ñ—Ä—É —á–∞—Å—Ç–∏–Ω–∫–∏
                  float sizeVariation = 1.0 + sin(uv.x * 10.0) * 0.1;
                  soft *= sizeVariation;
                  
                  // –î–æ–¥–∞—Ç–∫–æ–≤–µ —Ä–æ–∑–º–∏—Ç—Ç—è –¥–ª—è –º'—è–∫–∏—Ö –∫—Ä–∞—ó–≤ + blurFactor
                  soft = pow(soft, 0.8); // blurFactor –≤–ø–ª–∏–≤–∞—î –Ω–∞ —Ä–æ–∑–º–∏—Ç—Ç—è
                  
                  // –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å –∑ blurFactor
                  float alpha = soft * vAlpha * 0.05 * vBlurFactor; // vAlpha –≤–∂–µ –≤—Ä–∞—Ö–æ–≤—É—î blurFactor
                  
                  if(alpha < 0.001) discard;
                  
                  gl_FragColor = vec4(finalColor, alpha);
              }
        `;
        
                 const material = new THREE.ShaderMaterial({
             transparent: true,
             depthWrite: false,
             // –î–æ–¥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫—Ä–∞—â–æ—ó –∫—Ä—É–≥–ª–æ—Å—Ç—ñ —á–∞—Å—Ç–∏–Ω–æ–∫
             blending: THREE.NormalBlending,
             uniforms: {
                 uTime: { value: 0 }
             },
             vertexShader,
             fragmentShader
         });
        
        const dustCloud = new THREE.Points(geometry, material);
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑ –æ–±'—î–∫—Ç–∞ (—è–∫—ñ –≤–∂–µ –≤—Ä–∞—Ö–æ–≤—É—é—Ç—å terrain!)
        const x = coordinates.x;
        const z = coordinates.z;
        const y = coordinates.y + (height / 2); // Y –∑ –æ–±'—î–∫—Ç–∞ + –ø–æ–ª–æ–≤–∏–Ω–∞ –≤–∏—Å–æ—Ç–∏ —Ö–º–∞—Ä–∏
        
        // –õ–æ–≥—É—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è –¥–µ–±–∞–≥—É
        console.log(`‚òÅÔ∏è –•–º–∞—Ä–∞ ${cloudData.particleCount || 500} —á–∞—Å—Ç–∏–Ω–æ–∫: X=${x.toFixed(2)}, Y=${y.toFixed(2)}, Z=${z.toFixed(2)}, –≤–∏—Å–æ—Ç–∞ —Ö–º–∞—Ä–∏=${height.toFixed(2)}`);
        
        dustCloud.position.set(x, y, z);
        
        return dustCloud;
    }


    update(object: SceneObject): void {
        // –•–º–∞—Ä–∏ –º–æ–∂—É—Ç—å —Ä—É—Ö–∞—Ç–∏—Å—è –ø–æ–≤—ñ–ª—å–Ω–æ
        const cloud = this.getMeshById(object.id);
        if (cloud) {
            // –ü–æ–≤—ñ–ª—å–Ω–∏–π —Ä—É—Ö —Ö–º–∞—Ä–∏
            cloud.position.x += 0.01;
            if (cloud.position.x > 200) {
                cloud.position.x = -200;
            }
        }
    }

    remove(id: string): void {
        const cloud = this.getMeshById(id);
        if (cloud) {
            this.cloudGroup.remove(cloud);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ Points (–ø–∏–ª–æ–≤–∞ —Ö–º–∞—Ä–∞)
            if (cloud instanceof THREE.Points) {
                cloud.geometry.dispose();
                if (cloud.material instanceof THREE.ShaderMaterial) {
                    cloud.material.dispose();
                }
            }
        }
        super.remove(id);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–∏–ª–æ–≤–∏—Ö —Ö–º–∞—Ä (—à–µ–π–¥–µ—Ä–Ω–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è)
    updateAllClouds(): void {
        const time = this.clock.getElapsedTime();
        
        this.dustParticles.forEach((dustCloud, index) => {
            if (dustCloud instanceof THREE.Points) {
                // –û–Ω–æ–≤–ª—é—î–º–æ uTime –¥–ª—è –ø—Ä–æ—Å—Ç–∏—Ö —à–µ–π–¥–µ—Ä—ñ–≤
                if (dustCloud.material instanceof THREE.ShaderMaterial) {
                    dustCloud.material.uniforms.uTime.value = time;
                }
            }
        });
    }
}
